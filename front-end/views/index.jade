doctype html
html
  head
    title= 'ETA Map'
    link(rel='stylesheet', href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.46.0/mapbox-gl.css')
    link(href='https://www.mapbox.com/base/latest/base.css', rel='stylesheet')
    script(src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js")
    script(src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.46.0/mapbox-gl.js')

    style.
        body { margin: 0; padding: 0; }
        #map { position: absolute; top: 0; bottom: 0; width: 100%; z-index: 1 }
        .button {
            -webkit-box-shadow: 0px 0px 2px 1px rgba(100,100,100,0.75);
            -moz-box-shadow: 0px 0px 2px 1px rgba(100,100,100,0.75);
            box-shadow: 0px 0px 2px 1px rgba(100,100,100,0.75);
        }

        .slidecontainer {
            position: absolute; top: 10px; left: 520px; width: 135px; height: 10px;
            border-radius: 5px;
            background: #4d86b9;
            z-index: 3;
        }

        .slider {
            position: absolute; top: 0px;
            -webkit-appearance: none;
            border-radius: 5px;
            background: #4d86b9;
            outline: none;
            opacity: 0.7;
            -webkit-transition: .2s;
            transition: opacity .2s;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 25px;
            height: 25px;
            border-radius: 50%;
            background: #4CAF50;
            cursor: pointer;
        }

        .slider::-moz-range-thumb {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            background: #4CAF50;
            cursor: pointer;
        }

        #go-button { position: absolute; top: 10px; left: 330px; width: 50px; height: 80px; z-index: 2 }
        #draw-button { position: absolute; top: 10px; left: 400px; width: 100px; height: 80px; z-index: 2 }
        #astar-button { position: absolute; top: 40px; left: 520px; width: 135px; height: 50px; z-index: 2 }
        #auto-astar { position: absolute; top: 10px; left: 675px; width: 100px; height: 80px; z-index: 2 }
        #time-text-box { position: absolute; top: 150px; left: 10px; width: 300px; height: 110px; opacity: 0.9; z-index: 2 }

  body
    script(src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.2.0/mapbox-gl-geocoder.min.js')
    link(rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.2.0/mapbox-gl-geocoder.css' type='text/css')
    script(src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v3.1.3/mapbox-gl-directions.js')
    link(rel='stylesheet', href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v3.1.3/mapbox-gl-directions.css', type='text/css')

    div(id='map')
    button(class="button", id="go-button").
        Go
    button(class="button", id="draw-button").
        Draw
    button(class="button", id="astar-button").
        A-star

    button(class="button", id="auto-astar").
        Auto A*


    div(class="slidecontainer")
        input(type="range", min="0", max="100", value="0", class="slider", id="astar-range")


    div(class='pad1 col4 fill-purple', id="time-text-box")
        div(class='pad2 fill-lighten2')
            h2(class='fancy', id="time-text").
                ETA: ...

    script.
        function _fillData(layer, data) {
            var gpspoints = data.split("\n");
            i = 0;
            gpspoints.forEach(function(element) {
                gpspoints[i] = element.split(" ");
                if (gpspoints[i][0] && gpspoints[i][1]) {
                    layer.source.data.geometry.coordinates.push([parseFloat(gpspoints[i][0]), parseFloat(gpspoints[i][1])]);
                }
                i++;
            });
            return layer;
        }

        function _drawLines(map, id, color, data) {
            var layer = {
                "id": id,
                "type": "line",
                "source": {
                    "type": "geojson",
                    "data": {
                        "type": "Feature",
                        "properties": {},
                        "geometry": {
                            "type": "LineString",
                            "coordinates": []
                        }
                    }
                },
                "layout": {
                    "line-join": "round",
                    "line-cap": "round"
                },
                "paint": {
                    "line-color": color,
                    "line-width": 8
                }
            };
            map.addLayer(_fillData(layer, data));
        };

        function _drawPoints(map, id, color, data) {
            var layer = {
                "id": id,
                "type": "circle",
                "source": {
                    "type": "geojson",
                    "data": {
                        "type": "Feature",
                        "properties": {},
                        "geometry": {
                            "type": "LineString",
                            "coordinates": []
                        }
                    }
                },
                "layout": {
                },
                "paint": {
                    "circle-color": color,
                    "circle-radius": 5
                }
            };
            map.addLayer(_fillData(layer, data));
        };

        function _drawGeoJson(map, id, data) {
            var layer = {
                "id": id,
                "type": "symbol",
                "source": {
                    "type": "geojson",
                    "data": {
                        "type": "FeatureCollection",
                        "features": []
                    }
                },
                "layout": {
                    "text-field": "{title}",
                    "text-font": ["Open Sans Semibold", "Arial Unicode MS Bold"],
                    "text-offset": [0, 0.6],
                    "text-anchor": "top"
                }
            };

            var gpspoints = data.split("\n");
            i = 0;
            gpspoints.forEach(function(element) {
                gpspoints[i] = element.split(" ");
                if (gpspoints[i][0] && gpspoints[i][1] && gpspoints[i][2] && gpspoints[i][3]) {
                    layer.source.data.features.push({
                        "type": "Feature",
                        "geometry": {
                            "type": "Point",
                            "coordinates": [gpspoints[i][0], gpspoints[i][1]]
                        },
                        "properties": {
                            "title": gpspoints[i][2] + "\n" + gpspoints[i][3]
                        }
                    });
                }
                else if (gpspoints[i][0] && gpspoints[i][1]) {
                    layer.source.data.features.push({
                        "type": "Feature",
                        "geometry": {
                            "type": "Point",
                            "coordinates": [gpspoints[i][0], gpspoints[i][1]]
                        },
                        "properties": {
                            "title": i
                        }
                    });
                }
                i++;
            });
            console.log(layer);
            map.addLayer(layer);
        }

        function _drawFromFolder(map, objs, draw_template = true) {
            objs.forEach(function(obj) {
                if (map.getLayer(obj.id)) {
                    console.log("remove");
                    map.removeLayer(obj.id);
                    map.removeSource(obj.id);
                }
                map.addLayer(obj);
            });
        }

        function _removeFromFolder(map, objs) {
            objs.forEach(function(obj) {
                if (map.getLayer(obj.id)) {
                    map.removeLayer(obj.id);
                    map.removeSource(obj.id);
                }
            });
        }

        mapboxgl.accessToken = 'pk.eyJ1IjoiaHc5NjAzIiwiYSI6ImNqajJwaHUzZTBucTUzdnRiMGN4NWE5Z2kifQ.BV0MuwZu5dkZBm1EOR5eGg';
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/navigation-guidance-night-v2',
            center: [104.0847, 30.6809],
            zoom: 13
        });

        var nav = new mapboxgl.NavigationControl();
        map.addControl(nav, 'bottom-right');

        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true
        }), 'bottom-right');

        var mapDirections = new MapboxDirections({accessToken: mapboxgl.accessToken})
        map.addControl(mapDirections, 'top-left');

        // var geocoderStart = new MapboxGeocoder({
        //     accessToken: mapboxgl.accessToken,
        //     placeholder: "Choose starting point..."
        // });
        // var geocoderEnd = new MapboxGeocoder({
        //     accessToken: mapboxgl.accessToken,
        //     placeholder: "Choose destination..."
        // });

        // map.addControl(geocoderStart, 'top-left');
        // map.addControl(geocoderEnd, 'top-left');

        // var markerStart;
        // var markerEnd;
        var srclat;
        var srclon;
        var dstlat;
        var dstlon;
        old_batchidx = -1;
        batchidx = 0;
        old_data = [];

        map.on('load', function() {
            mapDirections.on('route', function(){
                mapDirections.removeRoutes();
            });
            mapDirections.on('origin', function(){
                srclat = mapDirections.getOrigin().geometry.coordinates[1];
                srclon = mapDirections.getOrigin().geometry.coordinates[0];
                old_batchidx = -1;
                batchidx = 0;
                _removeFromFolder(map, old_data);
                if (map.getLayer("astarpath.json")) {
                    map.removeLayer("astarpath.json");
                    map.removeSource("astarpath.json");
                    $('#time-text').text("ETA: ...");
                }
            });
            mapDirections.on('destination', function(){
                dstlat = mapDirections.getDestination().geometry.coordinates[1];
                dstlon = mapDirections.getDestination().geometry.coordinates[0];
                old_batchidx = -1;
                batchidx = 0;
                _removeFromFolder(map, old_data);
                if (map.getLayer("astarpath.json")) {
                    map.removeLayer("astarpath.json");
                    map.removeSource("astarpath.json");
                    $('#time-text').text("ETA: ...");
                }
            });
        //     geocoderStart.on('result', function(ev) {
        //         if (typeof markerStart !== "undefined") {
        //             markerStart.remove();
        //         }
        //         markerStart = new mapboxgl.Marker()
        //             .setLngLat(ev.result.geometry.coordinates)
        //             .addTo(map);
        //         srclat = ev.result.geometry.coordinates[1];
        //         srclon = ev.result.geometry.coordinates[0];
        //     });
        //     geocoderEnd.on('result', function(ev) {
        //         if (typeof markerEnd !== "undefined") {
        //             markerEnd.remove();
        //         }
        //         markerEnd = new mapboxgl.Marker()
        //             .setLngLat(ev.result.geometry.coordinates)
        //             .addTo(map);
        //         dstlat = ev.result.geometry.coordinates[1];
        //         dstlon = ev.result.geometry.coordinates[0];
        //     });

        });

        $(document).ready(function(){
            $("#draw-button").click(function(){
                /*$.post("/upload",
                {
                  srclat: srclat,
                  srclon: srclon,
                  dstlat: dstlat,
                  dstlon: dstlon
                },
                function(data, status){
                    // draw raw gps points
                    // _drawLines(map, "route", "#C05C58", data);
                    // _drawPoints(map, "original_point", "#303CA8", data);
                    // _drawGeoJson(map, "origin-geo", data);
                });*/

                /*
                $.post("/getfakedata",
                {
                },
                function(data, status){
                    // draw mapped points
                    //_drawPoints(map, "point", "#307C38", data);
                    _drawGeoJson(map, "geo", data);
                }); */
                $.post("/draw", {dir: "frontend-path"}, function(data, status) {
                    console.log("draw path " + data.length + " files");
                    _drawFromFolder(map, data);
                });
                $.post("/draw", {dir: "frontend-points"}, function(data, status) {
                    console.log("draw points " + data.length + " files");
                    _drawFromFolder(map, data);
                });
                $.post("/draw", {dir: "frontend-geo"}, function(data, status) {
                    console.log("draw geo " + data.length + " files");
                    _drawFromFolder(map, data);
                });
            });
            total_batches = 0;

            $("#go-button").click(function(){
                $.post("/getpath",
                {
                  srclat: srclat,
                  srclon: srclon,
                  dstlat: dstlat,
                  dstlon: dstlon
                },
                function(data, status){
                    console.log(data);
                    _drawFromFolder(map, [data[1]]);
                    total_batches = data[0];
                    $('#astar-range').prop({'max': total_batches});
                    console.log(parseFloat(Math.floor(Math.sqrt(total_batches) * 2.5)));
                    $('#time-text').text("ETA: " + parseInt(Math.floor(total_batches /4.1)) + " min");
                });
            });


            var slider = document.getElementById("astar-range");
            slider.oninput = function() {
                console.log(this.value);
                batchidx = this.value;
            }

            $("#astar-button").click(function(){
                //for (var i = 0; i < 10; i++) {
                    $.post("/drawastarsbatch", {dir: "frontend-astar", batch: batchidx}, function(data, status) {
                        // console.log(data);
                        if (batchidx < old_batchidx) {
                            _removeFromFolder(map, old_data);
                            _drawFromFolder(map, data);
                        } else if (batchidx > old_batchidx) {
                            _drawFromFolder(map, data);
                        }
                        old_data = data;
                        old_batchidx = batchidx;
                    });
                //}
            });

            $("#auto-astar").click(function(){
                // for (var i = 0; i < total_batches; i++) {
                    var i = 0;
                    old_data = []
                    var interval = setInterval(function(){
                        console.log('hello\n');
                        $.post("/drawastarssingle", {dir: "frontend-astar", batch: i}, function(data, status) {
                            _drawFromFolder(map, data);
                            old_data.push(data);
                        });
                        i = i + 1;
                        if (i > total_batches) clearInterval(interval);
                    }, 150);
                // }
            });
        });
